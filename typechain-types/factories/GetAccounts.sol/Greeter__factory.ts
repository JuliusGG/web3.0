/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Greeter, GreeterInterface } from "../../GetAccounts.sol/Greeter";

const _abi = [
  {
    inputs: [
      {
        internalType: "string[]",
        name: "_accounts",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "addresses",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "_accounts",
        type: "string[]",
      },
    ],
    name: "setAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e0238038062000e02833981810160405281019062000037919062000475565b80600090805190602001906200004f92919062000057565b50506200052b565b828054828255906000526020600020908101928215620000ab579160200282015b82811115620000aa57825182908051906020019062000099929190620000be565b509160200191906001019062000078565b5b509050620000ba91906200014f565b5090565b828054620000cc90620004f5565b90600052602060002090601f016020900481019282620000f057600085556200013c565b82601f106200010b57805160ff19168380011785556200013c565b828001600101855582156200013c579182015b828111156200013b5782518255916020019190600101906200011e565b5b5090506200014b919062000177565b5090565b5b8082111562000173576000818162000169919062000196565b5060010162000150565b5090565b5b808211156200019257600081600090555060010162000178565b5090565b508054620001a490620004f5565b6000825580601f10620001b85750620001d9565b601f016020900490600052602060002090810190620001d8919062000177565b5b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200024082620001f5565b810181811067ffffffffffffffff8211171562000262576200026162000206565b5b80604052505050565b600062000277620001dc565b905062000285828262000235565b919050565b600067ffffffffffffffff821115620002a857620002a762000206565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115620002e157620002e062000206565b5b620002ec82620001f5565b9050602081019050919050565b60005b8381101562000319578082015181840152602081019050620002fc565b8381111562000329576000848401525b50505050565b6000620003466200034084620002c3565b6200026b565b905082815260208101848484011115620003655762000364620002be565b5b62000372848285620002f9565b509392505050565b600082601f830112620003925762000391620001f0565b5b8151620003a48482602086016200032f565b91505092915050565b6000620003c4620003be846200028a565b6200026b565b90508083825260208201905060208402830185811115620003ea57620003e9620002b9565b5b835b818110156200043857805167ffffffffffffffff811115620004135762000412620001f0565b5b8086016200042289826200037a565b85526020850194505050602081019050620003ec565b5050509392505050565b600082601f8301126200045a5762000459620001f0565b5b81516200046c848260208601620003ad565b91505092915050565b6000602082840312156200048e576200048d620001e6565b5b600082015167ffffffffffffffff811115620004af57620004ae620001eb565b5b620004bd8482850162000442565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200050e57607f821691505b60208210811415620005255762000524620004c6565b5b50919050565b6108c7806200053b6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063da0321cd1461003b578063f481565114610059575b600080fd5b610043610075565b604051610050919061052a565b60405180910390f35b610073600480360381019061006e919061077b565b61014e565b005b60606000805480602002602001604051908101604052809291908181526020016000905b828210156101455783829060005260206000200180546100b8906107f3565b80601f01602080910402602001604051908101604052809291908181526020018280546100e4906107f3565b80156101315780601f1061010657610100808354040283529160200191610131565b820191906000526020600020905b81548152906001019060200180831161011457829003601f168201915b505050505081526020019060010190610099565b50505050905090565b61018c6040518060400160405280601181526020017f73657474696e67206164647265737365730000000000000000000000000000008152506101a6565b80600090805190602001906101a2929190610268565b5050565b61023c816040516024016101ba919061086f565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061023f565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280548282559060005260206000209081019282156102b7579160200282015b828111156102b65782518290805190602001906102a69291906102c8565b5091602001919060010190610288565b5b5090506102c4919061034e565b5090565b8280546102d4906107f3565b90600052602060002090601f0160209004810192826102f6576000855561033d565b82601f1061030f57805160ff191683800117855561033d565b8280016001018555821561033d579182015b8281111561033c578251825591602001919060010190610321565b5b50905061034a9190610372565b5090565b5b8082111561036e5760008181610365919061038f565b5060010161034f565b5090565b5b8082111561038b576000816000905550600101610373565b5090565b50805461039b906107f3565b6000825580601f106103ad57506103cc565b601f0160209004906000526020600020908101906103cb9190610372565b5b50565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561043557808201518184015260208101905061041a565b83811115610444576000848401525b50505050565b6000601f19601f8301169050919050565b6000610466826103fb565b6104708185610406565b9350610480818560208601610417565b6104898161044a565b840191505092915050565b60006104a0838361045b565b905092915050565b6000602082019050919050565b60006104c0826103cf565b6104ca81856103da565b9350836020820285016104dc856103eb565b8060005b8581101561051857848403895281516104f98582610494565b9450610504836104a8565b925060208a019950506001810190506104e0565b50829750879550505050505092915050565b6000602082019050818103600083015261054481846104b5565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61059d8261044a565b810181811067ffffffffffffffff821117156105bc576105bb610565565b5b80604052505050565b60006105cf61054c565b90506105db8282610594565b919050565b600067ffffffffffffffff8211156105fb576105fa610565565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561063157610630610565565b5b61063a8261044a565b9050602081019050919050565b82818337600083830152505050565b600061066961066484610616565b6105c5565b90508281526020810184848401111561068557610684610611565b5b610690848285610647565b509392505050565b600082601f8301126106ad576106ac610560565b5b81356106bd848260208601610656565b91505092915050565b60006106d96106d4846105e0565b6105c5565b905080838252602082019050602084028301858111156106fc576106fb61060c565b5b835b8181101561074357803567ffffffffffffffff81111561072157610720610560565b5b80860161072e8982610698565b855260208501945050506020810190506106fe565b5050509392505050565b600082601f83011261076257610761610560565b5b81356107728482602086016106c6565b91505092915050565b60006020828403121561079157610790610556565b5b600082013567ffffffffffffffff8111156107af576107ae61055b565b5b6107bb8482850161074d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061080b57607f821691505b6020821081141561081f5761081e6107c4565b5b50919050565b600082825260208201905092915050565b6000610841826103fb565b61084b8185610825565b935061085b818560208601610417565b6108648161044a565b840191505092915050565b600060208201905081810360008301526108898184610836565b90509291505056fea2646970667358221220eb4a1330f13261eb4a62b334504634f445b9882e138bcae623ef3e26f45388b764736f6c63430008090033";

type GreeterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreeterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Greeter__factory extends ContractFactory {
  constructor(...args: GreeterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Greeter> {
    return super.deploy(_accounts, overrides || {}) as Promise<Greeter>;
  }
  override getDeployTransaction(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_accounts, overrides || {});
  }
  override attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  override connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
